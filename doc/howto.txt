*howto.txt*     How-To articles about Vim motions and NeoVim

TABLE OF CONTENTS                         *howto-table-of-contents*
==============================================================================

How to use Vim help                       |howto-vim-help|
Vim motions                               |howto-vim-motions|
Operators                                 |howto-operators|
Undo, redo and repeat                     |howto-undo-redo-repeat|
Editing                                   |howto-editing|
Copy and paste                            |howto-copy-and-paste|
Visual mode                               |howto-visual-mode|
Search and replace using visual mode      |howto-visual-mode-search|
Marks                                     |howto-marks|
Indentation                               |howto-indentation|
Folding                                   |howto-folding|
Searching in your repo                    |howto-search-in-repo|
Working with windows                      |howto-windows|
Find and replace with regex               |howto-find-and-replace-with-regex|
Quick navigation                          |howto-quick-navigation|
Increment and decrement numbers           |howto-increment-decrement|
Multi cursors                             |howto-multi-cursors|
LSP                                       |howto-lsp|
Motions in the code                       |howto-motions-in-code|
Copilot                                   |howto-copilot|

HOW TO USE VIM HELP                       *howto-vim-help*
==============================================================================

Jump to specific subjects by using tags.  This can be done in two ways:

* Use the `CTRL-]` command while standing on the name of a command or option.
* Use `CTRL-O` to jump back  

For more information, just write `:help` and press ENTER

VIM MOTIONS                               *howto-vim-motions*
==============================================================================

Motions are applicable in their own or placed after any |operator|

HORIZONTAL MOVEMENTS                      *howto-horizontal-movements*
* `0`, `^`, `$` - Move to the start of the line, first non-blank character, and end of the line, respectively. (`:help 0`, `:help ^`, `:help $`)
* `w`, `b`, `e` - Move forward by word, back by word, and to the end of the word, respectively. (`:help w`, `:help b`, `:help e`)
* `f{char}`, `t{char}` - Move to the next occurrence of {char} on the line, or up to just before {char}, respectively. (`:help f`, `:help t`)
* `F{char}`, `T{char}` - Move to the previous occurrence of {char} on the line, or up to just after {char}, respectively. (`:help F`, `:help T`)
* `;`, `,` - Repeat the last `f`, `t`, `F`, or `T` command in the same or opposite direction. (`:help ;`, `:help ,`)
* `{num}j` or `{num}k` - Move up or down `num` lines. Tip: type `:set relativenumber` to see relative line numbers.

VERTICAL MOVEMENTS AND SCROLLING          *howto-vertical-movements*
* `{`, `}` - Move to the start of the current or next paragraph. (`:help {`, `:help }`)
* `gg`, `G` - Move to the start of the document, or the end of the document, respectively. (`:help gg`, `:help G`)
* `H`, `M`, `L` - Move to the top, middle, or bottom of the screen, respectively. (`:help H`, `:help M`, `:help L`)
* `Ctrl+b`, `Ctrl+f` - Move up or down a full page. (`:help CTRL-B`, `:help CTRL-F`)
* `Ctrl+u`, `Ctrl+d` - Move up or down half a page. (`:help CTRL-U`, `:help CTRL-D`)
* `Ctrl+o`, `Ctrl+i` - Jump back or forward to the previous or next cursor position. (`:help CTRL-O`, `:help CTRL-I`)
* `%` - Jump to matching brace, bracket, or parenthesis. (`:help %`)
* `:{line}` or `{line}G` - Move to a specific line number. (`:help G`). Tip: type `:set number` to see line numbers.
* `yi{motion}`, `ya{motion}` - Yank the text inside or around the text specified by the motion. (`:help text-objects`)

See |motion.txt|

OPERATORS                                 *howto-operators*
==============================================================================

* The motion commands we have seen before can be used after an operator command, to have the command
operate on the text that was moved over. (`:help operator`)

* Some of the operators are:

	|c|	c	change
	|d|	d	delete
	|y|	y	yank into register (does not change the text)
	|gu|	gu	make lowercase
	|gU|	gU	make uppercase
	|=|	=	autoindent
	|gq|	gq	text formatting
	|gw|	gw	text formatting with no cursor movement
	|>|	>	shift right
	|<|	<	shift left
	|!|	!	filter through an external program

COUNT MULTIPLIED

* `{count}{operator}{motion}` Multiplies the operation `count` times, e.g., `2yw` copy the next two words from the cursor.
* `{operator}{count}{motion}` Same as above. E.g., `d2w` also deletes two words.
* `{count1}{operator}{count2}{motion}`: If both the motion and operator include a count the two counts are multiplied. E.g., `2d3w` deletes six words.
* `{operator}{operator}`: When doubling the operator it operates on a line, e.g., `dd` deletes one line.
* `{count}{operator}{operator}`: When using a count, that many lines are operated upon. Thus `3dd` deletes three lines.
* `{count1}{operator}{count2}{operator}`: Both counts are multiplied, applied to lines, so `2y3y` yanks six lines.

UNDO, REDO AND REPEAT                     *howto-undo-redo-repeat*
==============================================================================

* `u` - Undo the last change. (`:help u`)
* `Ctrl+r` - Redo the last undone change. (`:help i_CTRL-R`)
* `.` - Repeat the last command. This can be incredibly powerful when combined with movement commands. (`:help .`)

EDITING                                   *howto-editing*
==============================================================================
* `i`, `a` - Enter insert mode before the cursor, or after the cursor. (`:help i`, `:help a`)
* `o`, `O` - Insert a new line below or above the current line and enter insert mode. (`:help o`, `:help O`)
* `y{motion}`, `d{motion}`, `c{motion}` - Yank (copy), delete, and change (delete and enter insert mode) the text referenced by motion. (`:help y`, `:help d`, `:help c`)
* `yy`, `dd`, `cc` - Yank (copy), delete, and change (delete and enter insert mode) the entire line. (`:help yy`, `:help dd`, `:help cc`)
* `di{motion}`, `da{motion}` - Delete the text inside or around the text specified by the motion. (`:help text-objects`)
* `ci{motion}`, `ca{motion}` - Change the text inside or around the text specified by the motion. (`:help text-objects`)
* `yi{motion}`, `ya{motion}` - Yank the text inside or around the text specified by the motion. (`:help text-objects`)

COPY AND PASTE                            *howto-copy-and-paste*
==============================================================================
* `p`, `P` - Paste the yanked or deleted text after or before the cursor, respectively. (`:help p`, `:help P`)
* `"+y`, `"+p` - Yank to or paste from the system clipboard. (`:help clipboard`)
* `:reg` - Display the contents of the registers. (`:help :reg`)
* `"{register}y`, `"{register}p` - Yank to or paste from a specific register. (`:help registers`)
* `:set paste`, `:set nopaste` - Toggle paste mode to prevent auto-indenting when pasting. (`:help paste`)
* `:echo has('clipboard')` - Check if your Vim installation supports clipboard operations. 1 means yes, 0 means no (`:help has()`)

VISUAL MODE                               *howto-visual-mode*
==============================================================================
* `v`, `V`, `Ctrl+v` - Enter visual mode by character, line, or block (column), respectively. (`:help visual-mode`)

We can then use `y` or `d` to yank (copy) or delete your selection or any
other |operator|, like `U` to uppercase all the selection.

SEARCH AND REPLACE USING VISUAL MODE      *howto-visual-mode-search*
==============================================================================
* `/`, `?` - Search forward or backward in the document. (`:help /`, `:help ?`)
* `*`, `#` - Search for the word under the cursor forward or backward. (`:help *`, `:help #`)
* `:%s/old/new/g` - Replace all occurrences of old with new in the document. (`:help :s`)

We can use `\1`, `\2`, etc. to refer to the matched groups, so between `\(` and `\)`, in the `old` part of the command.

Examples:

`:%s/update_fields=\[\(.*\)]/update_fields=(\1,)`: Replace `update_fields=[...]` with `update_fields=(...,)` in the whole file
Click `V`, select rows in a CSV and then `:s/\(.*\),\(.*\)/\2,\1/`: Swap two comma-separated values in the selected rows

* Trick for find and replace:
  1. `*` or `/` search the word you want to replace
  2. Press `cgn` search forward the last used search patern and start visual mode replacing it. (`:help gn`)
  3. Type the new word and press enter `ESC` to exit insert mode
  4. Press `n` to find next occurrence and `.` to repeat the last change

MARKS                                     *howto-marks*
==============================================================================
* `m{letter}` - Set a mark at the current cursor position. (`:help m`)
* `'{letter}` - Jump to the line of the mark. (`:help '`)

INDENTATION                               *howto-indentation*
==============================================================================
* `=` - Auto-indent the selected text. (`:help =`)
* `>>`, `<<` - Indent or unindent the selected lines. (`:help >>`, `:help <<`)

FOLDING                                   *howto-folding*
==============================================================================
* `zo`, `zc` - Open or close a fold under the cursor. (`:help folding`)
* `za` - Toggle the fold under the cursor. (`:help folding`)
* `zA` - Toggle all folds. (`:help folding`)

SEARCHING IN YOUR REPO                    *howto-search-in-repo*
==============================================================================

* `<Space> fw`: Find/open files based on its content (grep).
* `:vimgrep {pattern} {files}` - Search for a pattern in multiple files and populate the quick fix list. (`:help :vimgrep`)

*Note*: The `<Space> fw` shortcut uses the `nvim-telescope/telescope.vim` plugin

FIND AND REPLACE WITH REGEX               *howto-find-and-replace-with-regex*
==============================================================================

* `:%s/old/new/gc`: Replace all ocurrences of `old` with `new` in the whole file, asking for confirmation

We can use `\1`, `\2`, etc. to refer to the matched groups, so between `\(` and `\)`, in the `old` part of the command.

For example, if we have the following line:

`:%s/update_fields=\[\(.*\)]/update_fields=(\1,)`: Replace `update_fields=[...]` with `update_fields=(...,)` in the whole file

WORKING WITH WINDOWS                      *howto-windows*
==============================================================================

* `CTRL-w s`: Split the window in two
* `CTRL-w v`: Split the window vertically
* `CTRL-w q`: Quit the current window
* `CTRL-w o`: Quit others windows
* `CTRL-w h`: Move cursor to next window left to the current one
* `CTRL-w l`: Move cursor to next window right the current one
* `CTRL-w j`: Move cursor to next window below the current one
* `CTRL-w k`: Move cursor to next window above the current one

See https://neovim.io/doc/user/windows.html

QUICK NAVIGATION                          *howto-quick-navigation*
==============================================================================

* `CTRL-p`: Open the Telescope file finder
* `<Space> <Left>`: Go to the previous buffer (tab)
* `<Space> <Right>`: Go to the next buffer (tab)
* `Ctrl+o`: Go to the previous location. If used in insert mode, it move to normal mode just for one command and return back to insert.

Harpoon:

* `<Space> 9`: Show the Harpoon panel
* `<Space> 0`: Add the current file to the Harpoon panel
* `<Space> 1`: Move to the previous file in Harpoon
* `<Space> 2`: Move to the next file in Harpoon

*Note*: Some of these shortcuts use `nvim-telescope/telescope.vim` and `ThePrimeagen/harpoon` plugins

INCREMENT OR DECREMENT NUMBERS            *howto-increment-decrement*
==============================================================================

* `Ctrl-a`: Increment the number under the cursor
* `Ctrl-x`: Decrement the number under the cursor
* `V` + `Ctrl-a`: Increment all the numbers in the selection
* `V` + `Ctrl-x`: Decrement all the numbers in the selection
* `V` + `g` + `Ctrl-a`: Increment all the numbers in the selection, keeping the column alignment
* `V` + `g` + `Ctrl-x`: Decrement all the numbers in the selection, keeping the column alignment
* Also works with `Ctrl+V` to select a column

MULTI CURSORS                             *howto-multi-cursors*
==============================================================================

Basic usage:

- select words with `Ctrl-N` (like `Ctrl-d` in Sublime Text/VS Code)
- create cursors vertically with `Ctrl-Down` `Ctrl-Up`
- select one character at a time with `Shift-Arrows`
- press `n` `N` to get next/previous occurrence
- press `[` `]` to select next/previous cursor
- press `q` to skip current and get next occurrence
- press `Q` to remove current cursor/selection
- start insert mode with `i`,`a`,`I`,`A`

Two main modes:

- in _cursor mode_ commands work as they would in normal mode
- in _extend mode_ commands work as they would in visual mode
- press `Tab` to switch between «cursor» and «extend» mode

Most vim commands work as expected (motions, `r` to replace characters, `~` to change case, etc).

Note: This is possible thanks to the `mg979/vim-visual-multi` plugin

LSP                                       *howto-lsp*
==============================================================================

* `<Space> lf`: Display the diagnostic float window if the cursor is over one issue
* `<Space> ln`: Go to the next diagnostic issue
* `<Space> lp`: Go to the previous diagnostic issue
* `<Space> ca`: Run code actions
* `<Space> ra`: Rename the name over the cursor
* `<Space> gd`: Go to definition
* `<Space> q`: Diagnostic listing

*Note*: These shortcuts use `neovim/nvim-lspconfig` plugin

MOTIONS IN THE CODE                       *howto-motions-in-code*
==============================================================================

* `va=`: Select outer part of an assignment
* `vi=`: Select inner part of an assignment
* `vil`: Select inner part of a loop
* `vaf`: Select outer part of a method/function definition
* `vif`: Select inner part of a method/function definition
* `vac`: Select outer part of a class
* `vic`: Select inner part of a class

Change the `v` command with `d`, `c` or `y` to delete, change or yank the text selected by the motion.

* `<leader>na`: swap parameters/argument with next
* `<leader>n:`: swap object property with next
* `<leader>nm`: swap function with next
* `<leader>pa`: swap parameters/argument with prev
* `<leader>p:`: swap object property with prev
* `<leader>pm`: swap function with previous
 
* `<Space> a`: Open the aereal code outline window
* `{`: Navigate to the previous symbol in the code outline
* `}`: Navigate to the next symbol in the code outline

Note: These shortcuts are thanks to the `nvim-treesitter/nvim-treesitter-textobjects` and `stevearc/aerial.nvim` plugins

COPILOT                                   *howto-copilot*
==============================================================================

- `Alt+l`: Accept the suggestion
- `Alt+]`: Next suggestion
- `Alt+[`: Previous suggestion

Note: This is possible thanks to the `zbirenbaum/copilot.lua` plugin

vim:tw=78:ts=8:noet:ft=help:norl:
